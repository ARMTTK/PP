/*
# Complete Database Structure for ParkPass Application

## Overview
This database structure supports a comprehensive parking spot booking system with:
- User management (customers and parking owners)
- Parking spot management with location data
- Booking system with payment processing
- Admin dashboard functionality
- QR code and payment slip management

## Tables

### 1. Users Table
Stores all user accounts (customers and parking owners)

```sql
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  name TEXT NOT NULL,
  phone TEXT,
  user_type TEXT NOT NULL CHECK (user_type IN ('customer', 'owner', 'admin')),
  email_verified BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

### 2. User Profiles Table
Extended profile information for users

```sql
CREATE TABLE user_profiles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  avatar_url TEXT,
  date_of_birth DATE,
  address TEXT,
  city TEXT,
  state TEXT,
  postal_code TEXT,
  country TEXT DEFAULT 'US',
  preferences JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

### 3. Owner Profiles Table
Additional information for parking spot owners

```sql
CREATE TABLE owner_profiles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  business_name TEXT,
  business_address TEXT,
  business_phone TEXT,
  tax_id TEXT,
  bank_account_number TEXT,
  bank_routing_number TEXT,
  payment_qr_code_url TEXT,
  verification_status TEXT DEFAULT 'pending' CHECK (verification_status IN ('pending', 'verified', 'rejected')),
  verification_documents JSONB DEFAULT '[]',
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

### 4. Vehicles Table
Customer vehicle information

```sql
CREATE TABLE vehicles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  make TEXT NOT NULL,
  model TEXT NOT NULL,
  year INTEGER,
  color TEXT,
  license_plate TEXT NOT NULL,
  is_primary BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

### 5. Parking Spots Table
Main parking spot information

```sql
CREATE TABLE parking_spots (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  owner_id UUID REFERENCES users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  address TEXT NOT NULL,
  latitude DECIMAL(10, 8) NOT NULL,
  longitude DECIMAL(11, 8) NOT NULL,
  total_slots INTEGER NOT NULL DEFAULT 1,
  available_slots INTEGER NOT NULL DEFAULT 1,
  price DECIMAL(10, 2) NOT NULL,
  price_type TEXT NOT NULL CHECK (price_type IN ('hour', 'day', 'month')),
  phone TEXT,
  opening_hours TEXT DEFAULT '24/7',
  amenities JSONB DEFAULT '[]',
  images JSONB DEFAULT '[]',
  features JSONB DEFAULT '{}',
  status TEXT DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'maintenance')),
  rating DECIMAL(3, 2) DEFAULT 0,
  review_count INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

### 6. Parking Spot Availability Table
Time-based availability management

```sql
CREATE TABLE parking_spot_availability (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  spot_id UUID REFERENCES parking_spots(id) ON DELETE CASCADE,
  date DATE NOT NULL,
  start_time TIME NOT NULL,
  end_time TIME NOT NULL,
  status TEXT NOT NULL CHECK (status IN ('available', 'blocked', 'maintenance')),
  reason TEXT,
  slots_affected INTEGER DEFAULT 1,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  UNIQUE(spot_id, date, start_time, end_time)
);
```

### 7. Bookings Table
Parking reservations

```sql
CREATE TABLE bookings (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  spot_id UUID REFERENCES parking_spots(id) ON DELETE CASCADE,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  vehicle_id UUID REFERENCES vehicles(id) ON DELETE SET NULL,
  start_time TIMESTAMPTZ NOT NULL,
  end_time TIMESTAMPTZ NOT NULL,
  total_cost DECIMAL(10, 2) NOT NULL,
  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'active', 'completed', 'cancelled')),
  payment_method TEXT CHECK (payment_method IN ('card', 'qr', 'bank_transfer', 'wallet')),
  payment_status TEXT DEFAULT 'pending' CHECK (payment_status IN ('pending', 'paid', 'failed', 'refunded')),
  qr_code TEXT NOT NULL,
  pin TEXT NOT NULL,
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

### 8. Payment Slips Table
Uploaded payment proof for QR/bank transfer payments

```sql
CREATE TABLE payment_slips (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  booking_id UUID REFERENCES bookings(id) ON DELETE CASCADE,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  file_url TEXT NOT NULL,
  file_name TEXT NOT NULL,
  file_size INTEGER,
  upload_status TEXT DEFAULT 'pending' CHECK (upload_status IN ('pending', 'verified', 'rejected')),
  verification_notes TEXT,
  verified_by UUID REFERENCES users(id) ON DELETE SET NULL,
  verified_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

### 9. Reviews Table
Customer reviews and ratings

```sql
CREATE TABLE reviews (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  booking_id UUID REFERENCES bookings(id) ON DELETE CASCADE,
  spot_id UUID REFERENCES parking_spots(id) ON DELETE CASCADE,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
  comment TEXT,
  photos JSONB DEFAULT '[]',
  aspect_ratings JSONB DEFAULT '{}',
  is_anonymous BOOLEAN DEFAULT false,
  status TEXT DEFAULT 'published' CHECK (status IN ('published', 'hidden', 'flagged')),
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

### 10. Notifications Table
System notifications for users

```sql
CREATE TABLE notifications (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  message TEXT NOT NULL,
  type TEXT NOT NULL CHECK (type IN ('booking', 'payment', 'review', 'system', 'promotion')),
  data JSONB DEFAULT '{}',
  read BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT now()
);
```

### 11. Admin Logs Table
Audit trail for admin actions

```sql
CREATE TABLE admin_logs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  admin_id UUID REFERENCES users(id) ON DELETE SET NULL,
  action TEXT NOT NULL,
  resource_type TEXT NOT NULL,
  resource_id UUID,
  details JSONB DEFAULT '{}',
  ip_address INET,
  user_agent TEXT,
  created_at TIMESTAMPTZ DEFAULT now()
);
```

### 12. System Settings Table
Application configuration

```sql
CREATE TABLE system_settings (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  key TEXT UNIQUE NOT NULL,
  value JSONB NOT NULL,
  description TEXT,
  updated_by UUID REFERENCES users(id) ON DELETE SET NULL,
  updated_at TIMESTAMPTZ DEFAULT now()
);
```

## Indexes for Performance

```sql
-- User indexes
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_type ON users(user_type);

-- Parking spot indexes
CREATE INDEX idx_parking_spots_owner ON parking_spots(owner_id);
CREATE INDEX idx_parking_spots_location ON parking_spots(latitude, longitude);
CREATE INDEX idx_parking_spots_status ON parking_spots(status);
CREATE INDEX idx_parking_spots_rating ON parking_spots(rating DESC);

-- Booking indexes
CREATE INDEX idx_bookings_user ON bookings(user_id);
CREATE INDEX idx_bookings_spot ON bookings(spot_id);
CREATE INDEX idx_bookings_status ON bookings(status);
CREATE INDEX idx_bookings_dates ON bookings(start_time, end_time);

-- Payment slip indexes
CREATE INDEX idx_payment_slips_booking ON payment_slips(booking_id);
CREATE INDEX idx_payment_slips_status ON payment_slips(upload_status);

-- Review indexes
CREATE INDEX idx_reviews_spot ON reviews(spot_id);
CREATE INDEX idx_reviews_user ON reviews(user_id);

-- Notification indexes
CREATE INDEX idx_notifications_user ON notifications(user_id);
CREATE INDEX idx_notifications_read ON notifications(read);
```

## Row Level Security (RLS) Policies

```sql
-- Enable RLS on all tables
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE owner_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE vehicles ENABLE ROW LEVEL SECURITY;
ALTER TABLE parking_spots ENABLE ROW LEVEL SECURITY;
ALTER TABLE parking_spot_availability ENABLE ROW LEVEL SECURITY;
ALTER TABLE bookings ENABLE ROW LEVEL SECURITY;
ALTER TABLE payment_slips ENABLE ROW LEVEL SECURITY;
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE admin_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE system_settings ENABLE ROW LEVEL SECURITY;

-- Users can read their own data
CREATE POLICY "Users can read own data" ON users
  FOR SELECT TO authenticated
  USING (auth.uid() = id);

-- Users can update their own profile
CREATE POLICY "Users can update own profile" ON users
  FOR UPDATE TO authenticated
  USING (auth.uid() = id);

-- User profiles policies
CREATE POLICY "Users can manage own profile" ON user_profiles
  FOR ALL TO authenticated
  USING (user_id = auth.uid());

-- Owner profiles policies
CREATE POLICY "Owners can manage own profile" ON owner_profiles
  FOR ALL TO authenticated
  USING (user_id = auth.uid());

-- Vehicle policies
CREATE POLICY "Users can manage own vehicles" ON vehicles
  FOR ALL TO authenticated
  USING (user_id = auth.uid());

-- Parking spots policies
CREATE POLICY "Anyone can read active spots" ON parking_spots
  FOR SELECT TO authenticated
  USING (status = 'active');

CREATE POLICY "Owners can manage own spots" ON parking_spots
  FOR ALL TO authenticated
  USING (owner_id = auth.uid());

-- Booking policies
CREATE POLICY "Users can read own bookings" ON bookings
  FOR SELECT TO authenticated
  USING (user_id = auth.uid() OR 
         spot_id IN (SELECT id FROM parking_spots WHERE owner_id = auth.uid()));

CREATE POLICY "Users can create bookings" ON bookings
  FOR INSERT TO authenticated
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update own bookings" ON bookings
  FOR UPDATE TO authenticated
  USING (user_id = auth.uid());

-- Payment slip policies
CREATE POLICY "Users can manage own payment slips" ON payment_slips
  FOR ALL TO authenticated
  USING (user_id = auth.uid() OR 
         booking_id IN (SELECT id FROM bookings WHERE 
                       spot_id IN (SELECT id FROM parking_spots WHERE owner_id = auth.uid())));

-- Review policies
CREATE POLICY "Anyone can read published reviews" ON reviews
  FOR SELECT TO authenticated
  USING (status = 'published');

CREATE POLICY "Users can create reviews for their bookings" ON reviews
  FOR INSERT TO authenticated
  WITH CHECK (user_id = auth.uid() AND 
              booking_id IN (SELECT id FROM bookings WHERE user_id = auth.uid()));

-- Notification policies
CREATE POLICY "Users can read own notifications" ON notifications
  FOR SELECT TO authenticated
  USING (user_id = auth.uid());

-- Admin policies (only for admin users)
CREATE POLICY "Admins can read all data" ON admin_logs
  FOR SELECT TO authenticated
  USING (EXISTS (SELECT 1 FROM users WHERE id = auth.uid() AND user_type = 'admin'));

CREATE POLICY "Admins can manage system settings" ON system_settings
  FOR ALL TO authenticated
  USING (EXISTS (SELECT 1 FROM users WHERE id = auth.uid() AND user_type = 'admin'));
```

## Functions and Triggers

```sql
-- Function to update parking spot rating
CREATE OR REPLACE FUNCTION update_spot_rating()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE parking_spots 
  SET 
    rating = (SELECT AVG(rating)::DECIMAL(3,2) FROM reviews WHERE spot_id = NEW.spot_id AND status = 'published'),
    review_count = (SELECT COUNT(*) FROM reviews WHERE spot_id = NEW.spot_id AND status = 'published')
  WHERE id = NEW.spot_id;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger for rating updates
CREATE TRIGGER update_spot_rating_trigger
  AFTER INSERT OR UPDATE OR DELETE ON reviews
  FOR EACH ROW
  EXECUTE FUNCTION update_spot_rating();

-- Function to update timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply timestamp triggers to relevant tables
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_profiles_updated_at BEFORE UPDATE ON user_profiles
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_owner_profiles_updated_at BEFORE UPDATE ON owner_profiles
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_parking_spots_updated_at BEFORE UPDATE ON parking_spots
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_bookings_updated_at BEFORE UPDATE ON bookings
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
```

## Sample Data Inserts

```sql
-- Insert default system settings
INSERT INTO system_settings (key, value, description) VALUES
('app_name', '"ParkPass"', 'Application name'),
('default_currency', '"USD"', 'Default currency for payments'),
('booking_cancellation_hours', '2', 'Hours before booking start time when cancellation is allowed'),
('max_booking_duration_hours', '168', 'Maximum booking duration in hours (7 days)'),
('payment_verification_timeout_hours', '24', 'Hours to verify payment slips');
```

This database structure provides:
1. Complete user management with role-based access
2. Comprehensive parking spot management with geolocation
3. Flexible booking system with payment processing
4. Payment slip upload and verification workflow
5. Review and rating system
6. Admin audit trails and system configuration
7. Notification system for user engagement
8. Proper security with RLS policies
9. Performance optimization with indexes
10. Data integrity with triggers and functions